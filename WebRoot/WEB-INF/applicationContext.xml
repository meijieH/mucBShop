<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
	<!-- 定义使用C3P0连接池的数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的JDBC驱动 -->
		<property name="driverClass">
		 	<value>com.mysql.jdbc.Driver</value>
		 </property>
		<!-- 连接数据库所用的URL -->
		<property name="jdbcUrl">
			<value>jdbc:mysql://localhost:3306/eshop?useUnicode=true&amp;characterEncoding=gbk</value>
		</property>
		<!-- 连接数据库的用户名 -->
		<property name="user">
			<value>root</value>
		</property>
		<!-- 连接数据库的密码 -->
		<property name="password">
			<value>961216hmj</value>
		</property>
		<!-- 设置数据库连接池的最大连接数 -->
		<property name="maxPoolSize">
			<value>20</value>
		</property>
		<!-- 设置数据库连接池的最小连接数 -->
		<property name="minPoolSize">
			<value>2</value>
		</property>
		<!-- 设置数据库连接池的初始化连接数 -->
		<property name="initialPoolSize">
			<value>2</value>
		</property>
		<!-- 设置数据库连接池的连接的最大空闲时间,单位为秒 -->
		<property name="maxIdleTime">
			<value>20</value>
		</property>
	</bean>

    <!-- 定义Hibernate的SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <!-- 依赖注入上面定义的数据源dataSource -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 注册Hibernate的ORM映射文件 -->
        <property name="mappingResources">
            <list>
	            <value>com/ORM/Admin.hbm.xml</value>
	            <value>com/ORM/Book.hbm.xml</value>
	            <value>com/ORM/Order.hbm.xml</value>
	            <value>com/ORM/Student.hbm.xml</value>
	            <value>com/ORM/Appeal.hbm.xml</value>
	            <value>com/ORM/CreditTransfer.hbm.xml</value>
	            <value>com/ORM/Shoplist.hbm.xml</value>
            </list>
        </property>
        <!-- 设置Hibernate的相关属性 -->
        <property name="hibernateProperties">
            <props>
                <!-- 设置Hibernate的数据库方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- 设置Hibernate是否在控制台输出SQL语句，开发调试阶段通常设为true -->
                <prop key="show_sql">true</prop>
				<!-- 设置Hibernate一个提交批次中的最大SQL语句数 -->
                <prop key="hibernate.jdbc.batch_size">50</prop>
            </props>
        </property>
    </bean>

    <!--定义Hibernate的事务管理器HibernateTransactionManager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <!-- 依赖注入上面定义的sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--定义Spring的事务拦截器TransactionInterceptor -->
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
	    <!--  依赖注入上面定义的事务管理器transactionManager -->
        <property name="transactionManager" ref="transactionManager"/>
      	<!-- 定义需要进行事务拦截的方法及所采用的事务控制类型 -->    	
    	<property name="transactionAttributes">		    
		    <props>
			    <!-- 以browse、list、load、get及is开头的所有方法采用只读型事务控制类型 -->
			    <prop key="browse*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
			    <prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>
			    <!-- 所有方法均进行事务控制，如果当前没有事务，则新建一个事务 -->
		    	<prop key="*">PROPAGATION_REQUIRED</prop>
		    </props>
	    </property>
	</bean>
	
    <!-- 定义BeanNameAutoProxyCreatorf进行Spring的事务处理-->
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
	    <!--  针对指定的bean自动生成业务代理 -->
	    <property name="beanNames"> 
            <list>
               <value>studentService</value>
               <value>bookService</value>
               <value>orderService</value>
               <value>adminService</value>
               <value>creditTransferService</value>
               <value>shoplistService</value>
            </list>
	    </property>
	    <!--  这个属性为true时，表示被代理的是目标类本身而不是目标类的接口 -->
	    <property name="proxyTargetClass">
	    	<value>true</value>
	    </property>
       <!--  依赖注入上面定义的事务拦截器transactionInterceptor -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value> 
            </list>
        </property>
    </bean>	
	    
    <!-- 装配通用数据库访问类BaseDAOImpl -->    
	<bean id="dao" class="com.DAO.BaseDAOImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

    <!-- 部署学生管理业务逻辑组件studentServiceImpl --> 
	<bean id="studentService" class="com.service.StudentServiceImpl">
		<property name="dao" ref="dao"/>
	</bean>
	<!-- 部署书籍管理业务逻辑组件BookServiceImpl --> 
	<bean id="bookService" class="com.service.BookServiceImpl">
		<property name="dao" ref="dao"/>
	</bean>
  	<!-- 部署订单管理业务逻辑组件OrderServiceImpl --> 
    <bean id="orderService" class="com.service.OrderServiceImpl">
		<property name="dao" ref="dao"/>
	</bean>
	<!-- 部署管理员业务逻辑组件AdminServiceImpl --> 
	<bean id="adminService" class="com.service.AdminServiceImpl">
		<property name="dao" ref="dao"></property>
	</bean>
	<!--部署申诉业务逻辑组件AppealServiceImpl  -->
	<bean id="appealService" class="com.service.AppealServiceImpl">
		<property name="dao" ref="dao"></property>
	</bean>
	<!--部署积分转让记录业务逻辑组件CreditTransferServiceImpl  -->
	<bean id="creditTransferService" class="com.service.CreditTransferServiceImpl">
		<property name="dao" ref="dao"></property>
	</bean>
	
	<bean id="shoplistService" class="com.service.ShoplistServiceImpl">
		<property name="dao" ref="dao"></property>
	</bean>
	
    <!-- 部署Struts2负责学生事务管理的控制器studentAction --> 
	<bean id="studentAction" class="com.struts.action.StudentAction" scope="prototype">
		<property name="service" ref="studentService"/>
		<property name="bookservice" ref="bookService"/>
		<property name="credit_transfer_service" ref="creditTransferService"/>
		<property name="shop_list_service" ref="shoplistService"/>
	</bean>
	
	<bean id="bookAction" class="com.struts.action.BookAction" scope="prototype">
		<property name="service" ref="bookService"/>
		<property name="stdservice" ref="studentService"/>
	</bean>
	
	<bean id="orderAction" class="com.struts.action.OrderAction" scope="prototype">
		<property name="service" ref="orderService"/>
		<property name="bookservice" ref="bookService"/>
		<property name="stdservice" ref="studentService"/>
	</bean>
	
	<bean id="adminAction" class="com.struts.action.AdminAction" scope="prototype">
		<property name="service" ref="adminService"/>
		<property name="bookservice" ref="bookService"/>
		<property name="appealservice" ref="appealService"/>
	</bean>
	
	<bean id="appealAction" class="com.struts.action.AppealAction" scope="prototype">
		<property name="service" ref="appealService"/>
	</bean>
</beans>